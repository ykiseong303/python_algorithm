'''
분류 : 다이나믹 프로그래밍
문제 : 효율적인 화폐구성 (이코테 예제3)
작성일자 : 2021.05.27
'''

# 목적 : 목표금액을 최소한의 화폐로 구성해서 만들기
# 접근 : 그리디를 사용해서도 풀 수 있지만, DP로 접근
#   조건 1 > 2, 3 등으로 5를 해결할 수 있음(작>큰)
#   조건 2 > 2, 3 등이 반복적으로 나타남 (부분문제가 반복호출)
# 구현 : 바텀업 방식으로 화폐단위를 하나씩 확인해가며 갱신시키기

N, M = map(int, input().split())
lst = []
for _ in range(N) : 
    lst.append(int(input()))
# 계산된 결과를 기록하기 위한 DP테이블 생성
d = [10001] * (M+1) # INF의 값으로 문제의 최댓값 + 1로 설정
d[0] = 0 # 0원은 아무 것도 사용하지 않으면 되므로 0으로 지정

for i in range(N) : # 화폐의 단위가 저장된 리스트의 인덱스를 하나씩 돌리면서
    for j in range(lst[i],M+1) : # 목표금액까지 계속 증가하며 검사
        if d[j-lst[i]] != 10001 : # 현재금액 - 현재단위의 값이 INF가 아니라면 (만들 수 있는 상태라면)
            d[j] = min(d[j], d[j-lst[i]]+1) # 최소로 사용할 수 있는 값으로 갱신

if d[M] != 10001 : # 목표값이 INF가 아닌 경우
    print(d[M])
else : 
    print(-1)

