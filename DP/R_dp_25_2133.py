'''
분류 : 다이나믹 프로그래밍
문제 : 타일 채우기 (백준 2133)
작성일자 : 2021.07.07
'''

# 목적 : 3xN의 모양을 타일로 채울 수 있는 모든 경우의 수 출력
# 접근 : dp
#       직접 N=2,4,6...을 생각해보며 규칙을 찾고 점화식을 세우는 연습 필요
#       Nx2타일링처럼 1) 이전 경우에 d[2]가 붙을 수 있는 경우 
#       2) 이전단계에서 새로운 모양 2가지 * 남은 길이만큼 채울 수 있는 경우 
#           > N=6인경우, 가로가 4인 새로운 모양 2가지 * 가로가 2인 d[2]
#           > N=8인경우, 가로가 6인 새로운 모양 2가지 * 가로가 2인 d[2]
#                      가로가 4인 새로운 모양 2가지 * 가로가 4인 d[4]
#               즉, 1)에서 겹치는 것을 제외한 이전 단계의 새로운 모양 2가지를 모두 고려해야함
#               8인 경우 2 * d[2] + 2*d[4]가 필요 
#       3) 현재 단계에서 나타낼 수 있는 새로운 모양 2가지 
#       즉, 점화식 d[i] = 3 * d[i-2] + 2*sum(d[:i-2]) + 2
#       6인경우 2,4 / 4,2 / 6으로 생각하면 되는데, 
#       두번째도 d[4](가로 4로 나타낼 수 있는 모든경우)로 하면 첫번째와 겹치므로 
#       4로 나타낼 수 있는 새로운 모양 2가지만 고려해야 한다.



N = int(input())
d = [0] * 31 # 최대 길이까지 dp테이블 생성
d[2] = 3 # 초기값 설정
for i in range(4,31,2) : 
    d[i] = d[i-2] * 3 # 가로 2짜리만 남겨두는 경우 
    for j in range(4,i,2) : 
        d[i] = d[i] + d[i-j] * 2 # 이전 단계의 새로운 모양 2가지 * 남은 길이
    d[i] += 2 # 현재 모양에서 나타낼 수 있는 새로운 모양 2가지
print(d[N])