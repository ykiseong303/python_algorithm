'''
분류 : 다이나믹 프로그래밍
문제 : 카드 구매하기 (백준 11052)
작성일자 : 2021.07.10
'''

# 목적 : N개의 카드를 최대 금액으로 구입하는 금액 출력
# 접근 : dp
#       1. 2장을 살때의 경우 중 1+1은 1장최대금액 + 1장팩 가격 
#          3장을 사는경우 2+1은 2장 최대금액 + 1장팩 가격 ((1+1) + 1)
#          즉, 이전의 문제 (현재보다 낮은 개수의 카드를 살때의 최대금액)가 다음문제 풀이에 영향
#          3장을 최대로 사는 경우는 결국 d[1]+lst[2] or d[2]+lst[1] or d[3]+lst[0]이고
#          3장짜리를 사는 경우를 제외하고, 이전(1장최대, 2장최대)의 경우를 포함한다

N = int(input())
lst = [0] + list(map(int, input().split())) # 카드 i장(1,2,3...N)팩을 구매할때의 금액
d = [0] * (N+1) # i장을 살때의 최대금액
d[1] = lst[1] # 한장만 구매할 때는 1장짜리가 최대 금액 (초기값 설정)
for i in range(2, N+1) : 
    for j in range(1,i+1) : # j는 1부터 i까지 모든 경우를 봐야 하기 때문에 
        # 현재의 dp테이블보다 큰 경우
        if d[i] < d[i-j] + lst[j] : 
            # d[2] = d[1] + lst[1] or d[0] + lst[2] 
            # d[3] = d[2] + lst[1] or d[1] + lst[2] or d[0] + lst[3] 
            # d[4] = d[3] + lst[1] or d[2] + lst[2] or d[1] + lst[3] + d[0] + lst[4]
            # 여기서 d[2] + lst[1] + lst[1]의 경우에서 d[2] + lst[1] <= d[3]을 만족하므로
            # 중복(혹은 포함)되는 경우이기에 고려하지 않음 
            # 결국, 1장팩 샀을 때 최대금액 + 1장 팩 가격 or 2장팩만 구매하는 경우 등 
            # 구입할 수 있는 모든 경우를 점화식으로 표현 
            d[i] =  d[i-j] + lst[j]
print(d[N])